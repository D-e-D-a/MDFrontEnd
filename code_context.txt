// File: components/adminPageComponents/PanelTableButtons.tsx
'use client';
import React from 'react';
import {
buttonVariants } from '../ui/button';
import { cn } from '@/lib/utils';
import Link from 'next/link';

const PanelTableButtons = ({ className }: { className?: string }) => {
  return (
    <div className={cn('absolute right-2 top-2 flex gap-2', className)}>
      <Link href="/admin" className={buttonVariants()}>
        Sesije
      </Link>
      <Link href="/admin/questions" className={buttonVariants()}>
        Pitanja
      </Link>
      <Link href="/admin/users" className={buttonVariants()}>
        Korisnici
      </Link>
    </div>
  );
};

export default PanelTableButtons;

// File: components/adminPageComponents/Questions.tsx
'use client';
import { Input } from '../ui/input';
import { useEffect, useState } from 'react';

import { Button } from '../ui/button';

import { deleteQuestion, getSession, sendQuestion, updateQuestion } from '@/lib/apiCalls';
import { useAuth } from '../user-provider';
import { SessionRootObjectProps } from '@/lib/types';
import {
  TableCaption,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
  TableFooter,
  Table,
} from '../ui/table';
import { Pen, Plus, Trash, Trash2, X } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '../ui/dialog';
import React from 'react';

export default function Questions() {
  const [questionTitle, setQuestionTitle] = useState('');
  const [file, setFile] = useState<File[]>([]);
  const [sessionData, setSessionData] = useState<SessionRootObjectProps | null>(null);
  // const [sessionId, setSessionId] = useState<string>('');
  const { token } = useAuth();

  useEffect(() => {
    getSession(token).then((data) => {
      setSessionData(data?.data);
    });
  }, [token]);

  const handleSubmitQuestion = async (token: string, questionTitle: string, sessionId: string) => {
    sendQuestion(token, questionTitle, sessionId, file[0]).then((data) => {
      console.log('ðŸš€ ~ sendQuestion ~ data:', data);
      if (data) {
        window.location.reload();
      }
    });
  };

  const handleUpdateQuestion = async (token: string, questionId: string, questionTitle: string) => {
    updateQuestion(token, questionId, questionTitle).then((data) => {
      if (data) {
        window.location.reload();
      }
    });
  };
  const handleDeleteQuestion = async (token: string, id: string) => {
    deleteQuestion(token, id).then((data) => {
      console.log('ðŸš€ ~ deleteQuestion ~ data:', data);
      window.location.reload();
    });
  };
  if (sessionData?.data?.sessions.length === 0) {
    return <div className='text-3xl h-screen flex items-center justify-center'>No sessions, please create a session</div>;
  }
  return (
    <div className="flex flex-col items-center justify-center w-full  mt-20">
      {sessionData?.data?.sessions.map((session, index) => (
        <React.Fragment key={session.id}>
          <h1 className="text-3xl font-bold mb-10 text-primary">{session.title}</h1>
          <Table className="mb-8 w-[90%] mx-auto border">
            <TableHeader>
              <TableRow>
                <TableHead className="text-lg font-semibold text-slate-500">
                  Question Title
                </TableHead>
                <TableHead className="text-lg font-semibold text-slate-500">Edit</TableHead>
                <TableHead className="text-lg font-semibold text-slate-500">Delete</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {session.questions.map((question, index) => (
                <TableRow key={index}>
                  <TableCell>{question.title}</TableCell>
                  {/* Edit question */}
                  <TableCell>
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button variant={'outline'} className="hover:bg-blue-500">
                          <Pen className="w-4" />
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="sm:max-w-[425px]">
                        <DialogHeader>
                          <DialogTitle>Edit question</DialogTitle>
                          <DialogDescription>
                            Are you sure you want to edit this question?
                          </DialogDescription>
                        </DialogHeader>
                        <div className="flex flex-col space-y-1.5">
                          <label htmlFor="title">Pitanje</label>
                          <Input
                            id="title"
                            placeholder="Naziv pitanja"
                            // value={question.title}
                            onChange={(e) => setQuestionTitle(e.target.value)}
                          />
                        </div>

                        <DialogFooter>
                          <Button
                            onClick={() =>
                              handleUpdateQuestion(token, question.id.toString(), questionTitle)
                            }
                          >
                            Save
                          </Button>
                        </DialogFooter>
                      </DialogContent>
                    </Dialog>
                  </TableCell>
                  {/* Delete question */}
                  <TableCell>
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button variant={'outline'} className="hover:bg-red-500">
                          <Trash2 className="w-4" />
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="sm:max-w-[425px]">
                        <DialogHeader>
                          <DialogTitle>Delete question</DialogTitle>
                          <DialogDescription>
                            Are you sure you want to delete this question?
                          </DialogDescription>
                        </DialogHeader>

                        <DialogFooter>
                          <Button
                            variant={'destructive'}
                            onClick={() => handleDeleteQuestion(token, question.id.toString())}
                          >
                            Delete <Trash2 className="w-4" />
                          </Button>
                        </DialogFooter>
                      </DialogContent>
                    </Dialog>
                  </TableCell>
                </TableRow>
              ))}
              {/* Add question */}
              <TableRow>
                <TableCell colSpan={3} className="text-center">
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button variant="outline" className="hover:bg-green-500 mx-auto">
                        <Plus className="w-4" />
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="sm:max-w-[425px]">
                      <DialogHeader>
                        <DialogTitle>Add new question</DialogTitle>
                        <DialogDescription>
                          Enter the details for the new question.
                        </DialogDescription>
                      </DialogHeader>
                      <div className="flex flex-col space-y-1.5">
                        <label htmlFor="title">Pitanje</label>
                        <Input
                          id="title"
                          placeholder="Naziv pitanja"
                          onChange={(e) => setQuestionTitle(e.target.value)}
                        />
                      </div>
                      <p className="text-sm text-slate-500">
                        Ukoliko imate da prilozite fajl za sesiju
                      </p>
                      <div className="flex flex-col space-y-1.5 relative">
                        <Input
                          type="file"
                          className="cursor-pointer block w-full text-sm text-slate-500 border-0 file:rounded-md file:text-base file:font-semibold file:bg-primary file:text-slate-100 hover:file:bg-primary/90"
                          onChange={(e) => {
                            if (e.target.files) {
                              setFile(Array.from(e.target.files));
                            }
                          }}
                        />

                        {file.length > 0 && (
                          <X
                            className="h-4 w-4 absolute right-1 top-2 cursor-no-drop"
                            onClick={() => setFile([])}
                          />
                        )}
                      </div>
                      <DialogFooter>
                        <Button
                          onClick={() =>
                            handleSubmitQuestion(token, questionTitle, session.id.toString())
                          }
                        >
                          Add Question
                        </Button>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </React.Fragment>
      ))}
    </div>
  );
}

// File: components/adminPageComponents/Sessions.tsx
'use client';
import { Input } from '../ui/input';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { createSession, deleteSession, getSession, updateSession } from '@/lib/apiCalls';
import { useAuth } from '../user-provider';
import { useEffect, useState } from 'react';
import { Session } from '@/lib/types';
import {
  TableCaption,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
  TableFooter,
  Table,
} from '../ui/table';
import { Pen, Plus, Trash, Trash2, X } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '../ui/dialog';

const Sessions = () => {
  const { token } = useAuth();
  const [sessionName, setSessionName] = useState('');
  const [sessions, setSessions] = useState<{ data: { sessions: Session[] } } | null>(null);

  useEffect(() => {
    getSession(token).then((data) => {
      setSessions(data?.data);
    });
  }, [token]);

  const handleSubmit = async (token: string, sessionName: string) => {
    createSession(token, sessionName).then((data) => {
      console.log(data);
      getSession(token).then((data) => {
        setSessions(data?.data);
      });
    });
  };

  const handleUpdate = async (token: string, sessionId: string, sessionName: string) => {
    updateSession(token, sessionId, sessionName).then((data) => {
      console.log('ðŸš€ ~ updateSession ~ data:', data);
      getSession(token).then((data) => {
        setSessions(data?.data);
      });
    });
  };
  return (
    <div className="flex flex-col items-center w-full ">
      <h1 className="text-3xl font-bold mb-10">Sesije</h1>
      <Table className="mb-8 w-[90%] mx-auto border">
        <TableHeader>
          <TableRow>
            <TableHead className="text-lg font-semibold text-slate-500">Session Title</TableHead>
            <TableHead className="text-lg font-semibold text-slate-500">Edit</TableHead>
            <TableHead className="text-lg font-semibold text-slate-500">Delete</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {sessions?.data?.sessions.map((session, index) => (
            <TableRow key={index}>
              <TableCell>{session.title}</TableCell>

              <TableCell>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button variant={'outline'} className="hover:bg-blue-500">
                      <Pen className="w-4" />
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="sm:max-w-[425px]">
                    <DialogHeader>
                      <DialogTitle>Edit session</DialogTitle>
                      <DialogDescription>
                        Are you sure you want to edit this session?
                      </DialogDescription>
                    </DialogHeader>
                    <div className="flex flex-col space-y-1.5">
                      <label htmlFor="title">Sesija</label>
                      <Input
                        id="title"
                        placeholder="Naziv sesije"
                        onChange={(e) => setSessionName(e.target.value)}
                      />
                    </div>

                    <DialogFooter>
                      <Button
                        onClick={() => handleUpdate(token, session.id.toString(), sessionName)}
                      >
                        Save
                      </Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </TableCell>

              <TableCell>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button variant={'outline'} className="hover:bg-red-500">
                      <Trash2 className="w-4" />
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="sm:max-w-[425px]">
                    <DialogHeader>
                      <DialogTitle>Delete session</DialogTitle>
                      <DialogDescription>
                        Are you sure you want to delete this session?
                      </DialogDescription>
                    </DialogHeader>

                    <DialogFooter>
                      <Button
                        variant={'destructive'}
                        onClick={() => {
                          deleteSession(token, session.id.toString());
                          window.location.reload();
                        }}
                      >
                        Delete <Trash2 className="w-4" />
                      </Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </TableCell>
            </TableRow>
          ))}

          <TableRow>
            <TableCell colSpan={3} className="text-center">
              <Dialog>
                <DialogTrigger asChild>
                  <Button variant="outline" className="hover:bg-green-500 mx-auto">
                    <Plus className="w-4" />
                  </Button>
                </DialogTrigger>
                <DialogContent className="sm:max-w-[425px]">
                  <DialogHeader>
                    <DialogTitle>Add new session</DialogTitle>
                    <DialogDescription>Enter the name for the new session.</DialogDescription>
                  </DialogHeader>
                  <div className="flex flex-col space-y-1.5">
                    <label htmlFor="title">Sesija</label>
                    <Input
                      id="title"
                      placeholder="Naziv sesije"
                      onChange={(e) => setSessionName(e.target.value)}
                    />
                  </div>
                  <DialogFooter>
                    <Button onClick={() => handleSubmit(token, sessionName)}>Add Session</Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </div>
  );
};

export default Sessions;

// File: components/adminPageComponents/Users.tsx
'use client';
import React, { useEffect, useState } from 'react';
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { deleteUser, getUsers, updateUser, updateUserPassword } from '@/lib/apiCalls';
import { useAuth } from '../user-provider';
import { User } from '@/lib/types';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from '../ui/select';

const Users = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [oldPassword, setOldPassword] = useState('');
  const [password, setPassword] = useState('');
  const [role, setRole] = useState('');
  const { token } = useAuth();

  useEffect(() => {
    getUsers(token).then((data) => {
      if (!data) return;
      setUsers(data.data.users);
    });
  }, [token]);

  return (
    <Table className="w-[80%] overflow-hidden border mx-auto">
      <TableCaption>A list of users</TableCaption>
      <TableHeader>
        <TableRow>
          <TableHead>Ime</TableHead>
          <TableHead>Prezime</TableHead>
          <TableHead>User Name</TableHead>
          <TableHead>Email</TableHead>
          <TableHead>Role</TableHead>
          <TableHead>Update</TableHead>
          <TableHead>Delete</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {users.map((user, index) => (
          <TableRow key={index}>
            <TableCell className="font-medium">{user.firstName}</TableCell>
            <TableCell>{user.lastName}</TableCell>
            <TableCell>{user.username}</TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell>{user.role}</TableCell>
            <TableCell>
              <Dialog>
                <DialogTrigger asChild>
                  <Button variant="outline" className="hover:bg-blue-500">
                    Edit Profile
                  </Button>
                </DialogTrigger>
                <DialogContent className="sm:max-w-[425px]">
                  <DialogHeader>
                    <DialogTitle>Edit profile</DialogTitle>
                    <DialogDescription>
                      Make changes to profile here. Click save when you&apos;re done.
                    </DialogDescription>
                  </DialogHeader>
                  <div>
                    <div className="grid w-full items-center gap-4">
                      <div className="flex flex-col space-y-1.5">
                        <label htmlFor="firstName">Ime</label>
                        <Input
                          id="firstName"
                          placeholder="John"
                          onChange={(e) => setFirstName(e.target.value)}
                        />
                      </div>
                      <div className="flex flex-col space-y-1.5">
                        <label htmlFor="lastName">Prezime</label>
                        <Input
                          id="lastName"
                          placeholder="Doe"
                          onChange={(e) => setLastName(e.target.value)}
                        />
                      </div>
                      <div className="flex flex-col space-y-1.5">
                        <label htmlFor="email">Email adresa</label>
                        <Input
                          id="email"
                          placeholder="john@doe"
                          onChange={(e) => setEmail(e.target.value)}
                        />
                      </div>
                      <div className="flex flex-col space-y-1.5">
                        <label>Role korisnika</label>
                        <Select onValueChange={(e) => setRole(e)}>
                          <SelectTrigger className="w-full">
                            <SelectValue placeholder="Select role for a user" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectGroup>
                              <SelectItem value="ADMIN">ADMIN</SelectItem>
                              <SelectItem value="USER">USER</SelectItem>
                            </SelectGroup>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="flex flex-col space-y-1.5">
                        <label htmlFor="oldPassword">Old Password</label>
                        <Input
                          id="oldPassword"
                          placeholder="******"
                          onChange={(e) => setOldPassword(e.target.value)}
                        />
                      </div>
                      <div className="flex flex-col space-y-1.5">
                        <label htmlFor="newPassword">New Password</label>
                        <Input
                          id="newPassword"
                          placeholder="******"
                          onChange={(e) => setPassword(e.target.value)}
                        />
                      </div>
                    </div>
                  </div>
                  <DialogFooter>
                    <Button
                      onClick={() => {
                        // Use existing values if fields are empty
                        const updatedFirstName = firstName !== '' ? firstName : user.firstName;
                        const updatedLastName = lastName !== '' ? lastName : user.lastName;
                        const updatedEmail = email !== '' ? email : user.email;
                        const updatedRole = role !== '' ? role : user.role;

                        // Update user details
                        updateUser(
                          token,
                          user.id.toString(),
                          updatedFirstName,
                          updatedLastName,
                          updatedEmail,
                          updatedRole,
                        )
                          .then((data) => {
                            console.log(data);
                            // If password length is greater than 0, update the password
                            if (password.length > 0) {
                              updateUserPassword(token, user.id.toString(), oldPassword, password)
                                .then((data) => {
                                  console.log(data);
                                  // Reload the page after updating the password
                                  window.location.reload();
                                })
                                .catch((error) => {
                                  console.error('Error updating password:', error);
                                });
                            } else {
                              // Reload the page if there's no password to update
                              window.location.reload();
                            }
                          })
                          .catch((error) => {
                            console.error('Error updating user details:', error);
                          });
                      }}
                    >
                      Save changes
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </TableCell>
            <TableCell>
              <Dialog>
                <DialogTrigger asChild>
                  <Button variant="outline" className="hover:bg-red-500">
                    Delete Profile
                  </Button>
                </DialogTrigger>
                <DialogContent className="sm:max-w-[425px]">
                  <DialogHeader>
                    <DialogTitle>Delete profile</DialogTitle>
                    <DialogDescription>
                      Are you sure you want to delete this profile?
                    </DialogDescription>
                  </DialogHeader>

                  <DialogFooter>
                    <Button
                      variant={'destructive'}
                      onClick={() => {
                        deleteUser(token, user.id.toString()).then((data) => {
                          console.log(data);
                          window.location.reload();
                        });
                      }}
                    >
                      Delete
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};

export default Users;

// File: components/CreateAcc.tsx
'use client';
import React, { useState } from 'react';
import { Label } from './ui/label';
import { Input } from './ui/input';
import { Button, buttonVariants } from './ui/button';
import Link from 'next/link';
import { registerUser } from '@/lib/apiCalls';

export default function CreateAcc() {
  const [passwordMatchError, setPasswordMatchError] = useState('');
  const [createdSuccessfully, setCreatedSuccessfully] = useState(false);

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const data = new FormData(event.currentTarget);
    const enteredEmail = data.get('email') as string;
    const enteredPassword = data.get('password') as string;
    const enteredFirstName = data.get('first-name') as string;
    const enteredLastName = data.get('last-name') as string;
    const enteredUsername = data.get('username') as string;
    const enteredConfirmPassword = data.get('confirm-password') as string;

    if (enteredPassword !== enteredConfirmPassword) {
      setPasswordMatchError('Passwords do not match');
      return;
    }

    try {
      const userDetails = {
        firstName: enteredFirstName,
        lastName: enteredLastName,
        email: enteredEmail,
        username: enteredUsername,
        password: enteredPassword,
        role: 'USER',
        id: 0,
      };
      const response = await registerUser(userDetails);
      console.log(response); // Assuming your API returns some data
      response.data.status === 'Success' && setCreatedSuccessfully(true);
      // Optionally, you can redirect the user or perform other actions based on the response
    } catch (error) {
      console.error('Error:', error);
      // Handle the error here (display a message to the user, redirect, etc.)
    }
  };
  return (
    <>
      {createdSuccessfully ? (
        <div className="flex flex-col  gap-2 items-center justify-center h-screen w-full  border">
          <p className="text-3xl">Uspesno ste napravili nalog!!!</p>
          <Link href="/login" className={`${buttonVariants()}  `}>
            Login
          </Link>
        </div>
      ) : (
        <section className="max-w-2xl w-full">
          <div className="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
            <div className="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
              <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
                <p className="text-primary">Dobro dosli na sajt za glasanje</p>
                <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                  Napravite nalog
                </h1>
                <form className="space-y-4 md:space-y-6" onSubmit={handleSubmit}>
                  <div className="flex gap-4">
                    <div>
                      <Label htmlFor="first-name">Your First Name</Label>
                      <Input
                        type="text"
                        name="first-name"
                        id="first-name"
                        placeholder="John"
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="last-name">Your Last Name</Label>
                      <Input
                        type="text"
                        name="last-name"
                        id="last-name"
                        placeholder="Doe"
                        required
                      />
                    </div>
                  </div>
                  <div className="flex gap-4">
                    <div>
                      <Label htmlFor="email">Your email</Label>
                      <Input
                        type="email"
                        name="email"
                        id="email"
                        placeholder="name@gmail.com"
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="username">Your username</Label>
                      <Input
                        type="text"
                        name="username"
                        id="username"
                        placeholder="john_doe"
                        required
                      />
                    </div>
                  </div>
                  <div>
                    <Label htmlFor="password">Password</Label>
                    <Input
                      type="password"
                      name="password"
                      id="password"
                      placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="confirm-password">Confirm password</Label>
                    <Input
                      type="password"
                      name="confirm-password"
                      id="confirm-password"
                      placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
                      required
                    />
                    {passwordMatchError && (
                      <p className="text-red-500 text-sm">{passwordMatchError}</p>
                    )}
                  </div>

                  <Button type="submit" className="w-full text-white">
                    Create an account
                  </Button>
                  <p className="text-sm font-light text-gray-500 dark:text-gray-400">
                    Already have an account?
                    <Link href="/login" className={`${buttonVariants({ variant: 'link' })} pl-0.5`}>
                      Login here
                    </Link>
                  </p>
                </form>
              </div>
            </div>
          </div>
        </section>
      )}
    </>
  );
}

// File: components/FloatingButtons.tsx
'use client';
import React from 'react';
import { ThemeToggle } from './theme-toggle';
import { useAuth } from './user-provider';
import Link from 'next/link';
import { Button, buttonVariants } from './ui/button';
import { LogOut, User2 } from 'lucide-react';
import { handleLogOut } from '@/lib/utils';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';

const FloatingButtons = () => {
  const { isAdmin } = useAuth();
  return (
    <div className="absolute top-5 right-5 flex items-center gap-6">
      <Link href="/home" className={buttonVariants({ variant: 'outline' })}>
        Home
      </Link>

      {isAdmin && (
        <Link href="/admin" className={buttonVariants({ variant: 'outline' })}>
          Admin panel
        </Link>
      )}

      <Popover>
        <PopoverTrigger asChild>
          <Button variant="outline">
            <User2 className=" h-4 w-4" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-fit flex flex-col gap-5">
          <ThemeToggle />
          {/* <Link href='/account' className={buttonVariants()}>My account</Link> */}
          <Button onClick={handleLogOut}>
            Logout <LogOut className="ml-2 h-4 w-4" />
          </Button>
        </PopoverContent>
      </Popover>
    </div>
  );
};

export default FloatingButtons;

// File: components/Login.tsx
'use client';
import React, { useState } from 'react';
import { Label } from './ui/label';
import { Input } from './ui/input';
import { Button } from './ui/button';
import { Eye, Loader, LogIn } from 'lucide-react';
import { useRouter } from 'next/navigation';
import { handlePaste, togglePasswordVisibility } from '@/lib/utils';
import { loginUser } from '@/lib/apiCalls';
import { useAuth } from './user-provider';

const Login = () => {
  const router = useRouter(); // Initialize router for navigation
  const [loggedIn, setLoggedIn] = useState(false);
  const { error, setError, setUser, setIsAdmin } = useAuth();

  // Function to handle form submission
  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault(); // Prevent default form submission
    const data = new FormData(event.currentTarget);
    const enteredUsername = data.get('username') as string;
    const enteredPassword = data.get('password') as string;

    try {
      const response = await loginUser(enteredUsername, enteredPassword);

      if (response.data.status === 'Success') {
        setUser(response);
        sessionStorage.setItem('user', JSON.stringify(response));

        // Set session cookies without specifying expires or max-age
        document.cookie = `token=${response.data.token}; path=/; SameSite=Strict`;
        document.cookie = `isAdmin=${
          response.data.data.user.role === 'ADMIN'
        }; path=/; SameSite=Strict`;

        // Update the loggedIn state after redirecting
        setLoggedIn(true);

        // Redirect to home page if authentication is successful
        router.push('/home');
      } else {
        console.log('Incorrect email or password');
      }
    } catch (error) {
      console.log(error);
      setError(true);
    }
  };

  return (
    <section className="max-w-2xl w-full">
      <div className="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
        <div className="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
          <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
            <p className="text-primary">Dobro dosli na sajt za glasanje</p>
            <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
              Ulogujte se na sajt
            </h1>
            <form className="space-y-4 md:space-y-6" onSubmit={handleSubmit}>
              <div>
                <Label
                  htmlFor="username"
                  className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >
                  Your username
                </Label>
                <Input
                  type="username"
                  name="username"
                  id="username"
                  placeholder="john_doe"
                  required
                />
              </div>
              <div className="relative">
                <Label
                  htmlFor="password"
                  className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >
                  Password
                </Label>
                <Input
                  type="password"
                  name="password"
                  id="password"
                  placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
                  required
                  // onPaste={handlePaste}
                />{' '}
                <Eye
                  className="absolute  right-2 top-10  h-4 w-4 text-white cursor-pointer"
                  onClick={togglePasswordVisibility}
                />
              </div>
              {error && <p className="text-red-500">Incorrect username or password</p>}

              <Button type="submit" className="w-full px-5 text-white">
                {loggedIn ? (
                  <Loader className="ml-2 h-4 w-4 animate-spin" />
                ) : (
                  <>
                    Log in <LogIn className="ml-2 h-4 w-4" />
                  </>
                )}
              </Button>
            </form>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Login;

// File: components/Navbar.tsx
'use client';
import React from 'react';
import FloatingButtons from './FloatingButtons';
import { useAuth } from './user-provider';

const Navbar = () => {
  const { token } = useAuth();
  return (
    <div
      className={`${
        token ? 'block' : 'hidden'
      } flex sticky top-0 left-0 right-0 z-20 justify-between items-center px-6 py-4 bg-secondary h-20`}
    >
      <FloatingButtons />
    </div>
  );
};

export default Navbar;

// File: components/Placeholder.tsx
import { Loader } from 'lucide-react';
import React from 'react';

const Placeholder = () => {
  return (
    <div className='flex h-screen w-full items-center justify-center'>
      Loading <Loader className="ml-2 h-4 w-4 animate-spin" />
    </div>
  );
};

export default Placeholder;

// File: components/Session.tsx
'use client';
import { SessionRootObjectProps, questionsProps, votesProps } from '@/lib/types';
import React, { useEffect, useState } from 'react';
import { useAuth } from './user-provider';
import { Button, buttonVariants } from './ui/button';
import { baseUrl, getSession, sendComment, sendVotes } from '@/lib/apiCalls';
import Placeholder from './Placeholder';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Textarea } from './ui/textarea';
import Link from 'next/link';

const Session = () => {
  const { user, isLoading, id, token, setQuestions, setIsLoading, sessionData } = useAuth();
  // const [sessionData, setSessionData] = useState<SessionRootObjectProps | null>(null);
  const [answers, setAnswers] = useState<votesProps>();
  const [comments, setComments] = useState<{ [key: number]: string }>({});
  const [goToResults, setGoToResults] = useState(false);
  const [showCommentFields, setShowCommentFields] = useState<{ [key: number]: boolean }>({});

  // useEffect(() => {
  //   const fetchSessionData = async () => {
  //     try {
  //       const response = await getSession(token);
  //       setSessionData(response?.data || null);
  //     } catch (error) {
  //       console.error('Error fetching session data:', error);
  //     } finally {
  //       setIsLoading(false);
  //     }
  //   };

  //   fetchSessionData();
  // }, []);

  useEffect(() => {
    if (sessionData && sessionData.data && sessionData.data.sessions) {
      let allQuestions: questionsProps[] = [];
      sessionData.data.sessions.forEach((session) => {
        if (session && session.questions) {
          allQuestions = [...allQuestions, ...session.questions];
        }
      });
      if (setQuestions) {
        // Check if setQuestions is defined
        setQuestions(allQuestions);
      }
    }
  }, [sessionData, setQuestions]);

  const handleAnswerChange = (questionId: number, choice: string) => {
    // Set answers state as before
    setAnswers({
      questionId,
      choice,
    });

    // Show comment field for the selected question
    setShowCommentFields((prevState) => ({
      ...prevState,
      [questionId]: true,
    }));
  };
  const handleCommentChange = (questionId: number, e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setComments((prevComments) => ({
      ...prevComments,
      [questionId]: e.target.value,
    }));
  };

  const handleSend = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    if (!answers) {
      return;
    }

    sendVotes(token, answers).then((data) => {
      data?.status === 201 && setGoToResults(true);
    });

    if (comments[answers.questionId]) {
      sendComment(token, answers.questionId, comments[answers.questionId]);
      setComments((prevComments) => {
        const newComments = { ...prevComments };
        delete newComments[answers.questionId];
        return newComments;
      });
    }
  };

  useEffect(() => {
    if (sessionData === null) {
      const timer = setTimeout(() => {
        window.location.reload();
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [sessionData]);

  // Show loading state if isLoading is true
  if (isLoading || sessionData === null) {
    return <Placeholder />;
  }

  // Show user data if isLoading is false
  return (
    <div className="min-h-screen w-full relative flex flex-col items-center justify-center ">
      <div className="space-y-4 mt-28">
        <h1 className="text-2xl md:text-4xl">Dobro dosli {user?.data.data.user.firstName}</h1>
        {sessionData?.data.sessions.length === 0 ? (
          <h2 className="text-xl font-semibold">Nema sesija</h2>
        ) : (
          <h2> Danas imamo {sessionData?.data.pageInfo.total} sesiju/e o kojima se glasa:</h2>
        )}
      </div>
      <form className="mt-4 flex flex-col items-center" onSubmit={handleSend}>
        <div className="flex flex-wrap gap-4 items-start justify-center ">
          {sessionData?.data.sessions.map((session) => {
            return (
              <div key={session.id} className="border border-primary min-w-[300px] text-center p-6">
                <h2 className="text-xl font-semibold">{session.title}</h2>
                <div className="p-4 flex flex-col gap-8 items-center justify-center">
                  {session.questions.map((question, id) => {
                    return (
                      <div className="flex flex-col gap-6 items-baseline" key={question.id}>
                        <p>
                          <span className="font-bold text-primary mr-2">{id + 1}.</span>
                          {question.title}
                        </p>
                        {question.documents.map((document) => {
                          const fileUrl = `${baseUrl}/media/download/${document.id}`;
                          return (
                            <div key={document.id}>
                              <a href={fileUrl} download>
                                {document.fileName}
                              </a>
                            </div>
                          );
                        })}
                        <div className="flex gap-2 items-center ">
                          <Input
                            type="radio"
                            id={`yes-${question.id}`}
                            name={question.id.toString()}
                            onChange={(e) => handleAnswerChange(question.id, 'YES')}
                          />
                          <Label htmlFor={`yes-${question.id}`} className="cursor-pointer">
                            Yes
                          </Label>
                          <Input
                            type="radio"
                            id={`no-${question.id}`}
                            name={question.id.toString()}
                            onChange={(e) => handleAnswerChange(question.id, 'NO')}
                          />
                          <Label htmlFor={`no-${question.id}`} className="cursor-pointer">
                            No
                          </Label>
                        </div>
                        <Textarea
                          placeholder="Unesite komentar"
                          value={comments[question.id] || ''}
                          onChange={(e) => handleCommentChange(question.id, e)}
                          disabled={!showCommentFields[question.id]}
                        />
                      </div>
                    );
                  })}
                </div>
              </div>
            );
          })}
        </div>
        {goToResults ? (
          <Link href="/results" className={`${buttonVariants({})} mt-20`}>
            Pogledaj rezultate
          </Link>
        ) : (
          <Button className="mt-20" type="submit" disabled={!answers}>
            PoÅ¡alji
          </Button>
        )}
      </form>
    </div>
  );
};

export default Session;

// File: components/theme-provider.tsx
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}

// File: components/theme-toggle.tsx
"use client";

import * as React from "react";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export function ThemeToggle() {
  const { setTheme,theme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon" className="w-full flex">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute left-10 h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          {theme}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

// File: components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

// File: components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

// File: components/ui/checkbox.tsx
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

// File: components/ui/dialog.tsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

// File: components/ui/dropdown-menu.tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

// File: components/ui/input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

// File: components/ui/label.tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

// File: components/ui/popover.tsx
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

// File: components/ui/select.tsx
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

// File: components/ui/table.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

// File: components/ui/textarea.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

// File: components/UserAcc.tsx
'use client';
import React from 'react';
import { Button } from './ui/button';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from './ui/card';
import { Input } from './ui/input';
import { updateUser } from '@/lib/apiCalls';
import { useAuth } from './user-provider';

const UserAcc = () => {
  const { token } = useAuth();
  const handleUpdateUserDetails = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    console.log('ðŸš€ ~ file: UserAcc.tsx:handleSubmit ~ event:', event);
    const data = new FormData(event.currentTarget);
    const enteredEmail = data.get('email') as string;
    const enteredFirstName = data.get('firstName') as string;
    const enteredLastName = data.get('lastName') as string;
    // updateUser(token, enteredEmail, enteredFirstName, enteredLastName);
  };
  return (
    <div>
      <Card className="w-[350px]">
        <CardHeader>
          <CardTitle>Updejtuj podatke</CardTitle>
          <CardDescription>Promijenite ime i prezime ili email</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleUpdateUserDetails}>
            <div className="grid w-full items-center gap-4">
              <div className="flex flex-col space-y-1.5">
                <label htmlFor="email">Email adresa</label>
                <Input id="email" placeholder="Email" />
              </div>
              <div className="flex flex-col space-y-1.5">
                <label htmlFor="firstName">Ime</label>
                <Input id="firstName" placeholder="First Name" />
              </div>
              <div className="flex flex-col space-y-1.5">
                <label htmlFor="lastName">Prezime</label>
                <Input id="lastName" placeholder="Last Name" />
              </div>
            </div>
            <CardFooter className="flex justify-center  items-end p-0 pt-6">
              <Button type="submit">Updejtuj</Button>
            </CardFooter>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};

export default UserAcc;

// File: components/user-provider.tsx
'use client';
import React, { createContext, PropsWithChildren, useContext, useEffect, useState } from 'react';
import { RegisterResponseProps, SessionRootObjectProps } from '@/lib/types';
import { getSession } from '@/lib/apiCalls';

// Define the shape of the context value
interface UserContextProps {
  user: RegisterResponseProps | null; // User type imported from '@/lib/types'
  setUser: React.Dispatch<React.SetStateAction<RegisterResponseProps | null>>;
  error: boolean;
  setError: React.Dispatch<React.SetStateAction<boolean>>;
  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;
  isLoading: boolean;
  id?: number;
  token: string;
  questions?: any[];
  setQuestions?: React.Dispatch<React.SetStateAction<any | undefined>>;
  isAdmin?: boolean;
  setIsAdmin?: React.Dispatch<React.SetStateAction<boolean>>;
  sessionData?: SessionRootObjectProps | null;
  setSessionData?: React.Dispatch<React.SetStateAction<SessionRootObjectProps | null>>;
}

// Create the context
export const UserContext = createContext<UserContextProps | null>(null);

// Create the provider component
export default function UserProvider({ children }: PropsWithChildren<{}>) {
  // Define state for user and isLoading
  const [user, setUser] = useState<RegisterResponseProps | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [id, setId] = useState(0);
  const [questions, setQuestions] = useState([]);
  const [token, setToken] = useState('');
  const [error, setError] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);
  const [sessionData, setSessionData] = useState<SessionRootObjectProps | null>(null);

  useEffect(() => {
    const initialize = async () => {
      const storedUser = sessionStorage.getItem('user');
      const storedToken = document.cookie.split('; ').find((row) => row.startsWith('token='));
      const tokenValue = storedToken?.split('=')[1] || '';
      setToken(tokenValue);

      if (storedUser) {
        setUser(JSON.parse(storedUser));
      }

      if (tokenValue) {
        try {
          const response = await getSession(tokenValue);
          sessionStorage.setItem('sessionData', JSON.stringify(response?.data));
          setSessionData(response?.data || null);
        } catch (error) {
          console.error('Error fetching session data:', error);
          setError(true);
        }
      }

      setIsLoading(false); // Change isLoading to false after retrieving user data and session data
    };

    initialize();
  }, []);

  useEffect(() => {
    user?.data.data.user.role === 'ADMIN' && setIsAdmin(true);
  }, [user]);


  // Define the value to be passed to the context provider
  const value: UserContextProps = {
    user,
    setUser,
    isLoading,
    id,
    token,
    error,
    setError,
    questions,
    setQuestions,
    isAdmin,
    setIsAdmin,
    setIsLoading,
    sessionData,
    setSessionData,
  };

  // Render the provider with the value and children
  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;
}

export function useAuth() {
  // Access the context
  const context = useContext(UserContext);

  // Check if the context exists
  if (!context) {
    throw new Error('useAuth must be used within a UserProvider');
  }

  // Return the context
  return context;
}

// File: components/Voting.tsx
'use client';
import React, { useEffect, useState } from 'react';
import { useAuth } from './user-provider';
import { getSession } from '@/lib/apiCalls';
import Link from 'next/link';
import { buttonVariants } from './ui/button';
import Placeholder from './Placeholder';
import { SessionRootObjectProps } from '@/lib/types';

export default function Voting() {
  const { questions, token } = useAuth();
  const [results, setResults] = useState<SessionRootObjectProps>();
  const [sessionId, setSessionId] = useState<number[]>([]);

  useEffect(() => {
    getSession(token)
      .then((data) => {
        setResults(data?.data);
      })
      .catch((error) => {
        console.error('Error fetching session data:', error);
      });
  }, [questions, token]);

  if (!results) {
    return <Placeholder />;
  }
  console.log(results);

  return (
    <div className="flex flex-wrap items-center justify-around h-screen gap-6">
      {questions && questions.length > 0 ? (
        results?.data?.sessions?.map((result, index) => {
          return (
            <div key={index} className="h-[80%]">
              <h1 className="text-2xl font-bold mb-4">Sesija: {result.title}</h1>
              <div className="">
                <p className="mb-2 text-lg font-semibold">Pitanje je:</p>
                {result.questions.map((dataItem, dataIndex) => {
                  // Count the 'YES' and 'NO' votes
                  const yesVotes = dataItem.votes.filter((vote) => vote.choice === 'YES').length;
                  const noVotes = dataItem.votes.filter((vote) => vote.choice === 'NO').length;

                  return (
                    <div
                      key={dataIndex}
                      className="border border-primary p-4 flex flex-col gap-4 mt-4"
                    >
                      <h2>
                        {dataItem.id}.{dataItem.title}
                      </h2>
                      <p>Yes votes: {yesVotes}</p>
                      <p>No votes: {noVotes}</p>
                      <div>
                        <h3>Comments:</h3>
                        {dataItem.comments.length === 0 ? (
                          <p>No comments yet</p>
                        ) : (
                          <div className="border border-secondary p-4 h-28 overflow-auto">
                            {dataItem.comments.map((comment, commentIndex) => (
                              <p key={commentIndex}>{comment.text}</p>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          );
        })
      ) : (
        <p className="text-center flex items-center justify-center  h-screen">
          Molimo vas da prvo glasate na pitanja sa{' '}
          <Link href={'/home'} className={buttonVariants({ variant: 'link' })}>
            pocetne stranice
          </Link>
        </p>
      )}
    </div>
  );
}

// File: app/(adminpanel)/admin/page.tsx
import PanelTableButtons from '@/components/adminPageComponents/PanelTableButtons'
import Sessions from '@/components/adminPageComponents/Sessions'
import React from 'react'

export default function AdminPage() {
  return (
    <div className='flex items-center justify-center h-screen relative'>
      <PanelTableButtons />
        <Sessions />
    </div>
  )
}

// File: app/(adminpanel)/admin/questions/page.tsx
import PanelTableButtons from '@/components/adminPageComponents/PanelTableButtons';
import Questions from '@/components/adminPageComponents/Questions';

export default function QuestionsPage() {
  return (
    <div className="flex items-start justify-center h-screen relative ">
      <PanelTableButtons />
      <Questions />
    </div>
  );
}

// File: app/(adminpanel)/admin/users/page.tsx
import PanelTableButtons from '@/components/adminPageComponents/PanelTableButtons';
import Users from '@/components/adminPageComponents/Users';
import React from 'react';

export default function UsersPage() {
  return (
    <div className="flex items-center justify-center h-screen relative">
      <PanelTableButtons />
      <Users />
    </div>
  );
}

// File: app/account/page.tsx
import UserAcc from '@/components/UserAcc';
import React from 'react';

export default function Account() {
  return <div className='flex justify-center items-center h-full w-full min-h-screen'>
    <UserAcc />
  </div>;
}

// File: app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;


@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 224 71.4% 4.1%;
    --card: 0 0% 100%;
    --card-foreground: 224 71.4% 4.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 224 71.4% 4.1%;
    --primary: 262.1 83.3% 57.8%;
    --primary-foreground: 210 20% 98%;
    --secondary: 220 14.3% 95.9%;
    --secondary-foreground: 220.9 39.3% 11%;
    --muted: 220 14.3% 95.9%;
    --muted-foreground: 220 8.9% 46.1%;
    --accent: 220 14.3% 95.9%;
    --accent-foreground: 220.9 39.3% 11%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 20% 98%;
    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 262.1 83.3% 57.8%;
    --radius: 1rem;
  }

  .dark {
    --background: 224 71.4% 4.1%;
    --foreground: 210 20% 98%;
    --card: 224 71.4% 4.1%;
    --card-foreground: 210 20% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 20% 98%;
    --primary: 263.4 70% 50.4%;
    --primary-foreground: 210 20% 98%;
    --secondary: 215 27.9% 16.9%;
    --secondary-foreground: 210 20% 98%;
    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;
    --accent: 215 27.9% 16.9%;
    --accent-foreground: 210 20% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 20% 98%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 263.4 70% 50.4%;
  }
}


@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

// File: app/home/page.tsx
import Session from '@/components/Session';
import React from 'react';

export default function page() {
  return (
    <div className="flex min-h-screen items-center justify-center ">
      <Session />
    </div>
  );
}

// File: app/layout.tsx
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import { ThemeProvider } from '@/components/theme-provider';
import './globals.css';
import UserProvider from '@/components/user-provider';
import Navbar from '@/components/Navbar';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <UserProvider>
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
          >
           <Navbar />
            {children}
          </ThemeProvider>
        </UserProvider>
      </body>
    </html>
  );
}

// File: app/login/page.tsx
import Login from '@/components/Login';
import React from 'react';

export default function LoginPage() {
  return (
    <div className="flex min-h-screen flex-col items-center ">
      <Login />
    </div>
  );
}

// File: app/page.tsx
import CreateAcc from '@/components/CreateAcc';

export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center ">
      <CreateAcc />
    </main>
  );
}

// File: app/results/page.tsx
import Voting from '@/components/Voting'
import React from 'react'

export default async function Results() {
    return (
        <div>
            <Voting />
        </div>
    )
}



